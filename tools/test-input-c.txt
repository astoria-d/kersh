int aaaa;
int dddd = 0;
int;
char buf[ BUFSIZE ];
int char* pt = buf;
typedef int INT32 ;
struct point ct = {5,32};
typedef struct point {
    int x;
    int y;
} T_POINT ;

struct ftrace_branch_data {
 const char *func;
 const char *file;
 unsigned line;
 union {
  struct {
   unsigned long correct;
   unsigned long incorrect;
  };
  struct {
   unsigned long miss;
   unsigned long hit;
  };
  unsigned long miss_hit[2];
 };
};

 int r = 32;

int main(int argc, char* argv[]) {
    int ret;
    char ch;
    char* cartridge;
    extern int optind;
    param_debug = FALSE;
    mapper_load = FALSE;
    printf("motonesemu start...\n");

    while( (ch = getopt(argc, argv, "dhm:")) != -1) {
        switch (ch) {
            case 'd':
                param_debug = TRUE;
                break;
            case 'm':
                memset (mapper_fname, 0, FNAME_LEN);
                if (strlen(optarg) > FNAME_LEN) {
                    printf("mapper file name [%s] too long...\n", optarg);
                    return 0;
                }
                strcpy (mapper_fname, optarg);
                mapper_load = TRUE;
                break;
            case 'h':
            default:
                print_usage();
                return 0;
        }
    }
    argc -= optind - 1;
    argv += optind - 1;

    if (argc <= 1) {
        print_usage();
        return -1;
    }
    debug_mode = param_debug;

    ret = init_datas();
    if (!ret) {
        fprintf(stderr, "initialization failure...\n");
        return RT_ERROR;
    }

    ret = prepare_sig();
    if (!ret) {
        fprintf(stderr, "signal handling error...\n");
        return RT_ERROR;
    }
 
    cartridge = argv[1];
    ret = load_cartridge(cartridge);
    if (!ret) {
        fprintf(stderr, "load cartridge file err.\n");
        return FALSE;
    }

    reset_cpu();
    ret = start_clock();
    if (!ret) {
        fprintf(stderr, "clock start error\n");
        return FALSE;
    }

    while (!main_loop_done) {
        sleep(1);
        if (critical_error)
            break;
    }

    clean_datas();

    return 0;
}

char *p = *(char *)res; 

static inline void __write_once_size(volatile void *p, void *res, int size)
{
 switch (size) {
 case 1: *p = *res; break;
 case 1: *p = *(char *)res; break;
 }
}

static inline void __write_once_size(volatile void *p, void *res, int size)
{
 switch (size) {
 case 1: *(volatile unsigned char *)p = *(unsigned char *)res; break;
 case 2: *(volatile unsigned short *)p = *(unsigned short *)res; break;
 case 4: *(volatile unsigned int *)p = *(unsigned int *)res; break;
 case 8: *(volatile unsigned long *)p = *(unsigned long *)res; break;
 default:
  __builtin_memcpy((void *)p, (const void *)res, size);
 }
}
